// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Example.pb.h"
#import "ProtoService.h"
// @@protoc_insertion_point(imports)

@implementation FFExampleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FFExampleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL FFAccountTypeIsValidValue(FFAccountType value) {
  switch (value) {
    case FFAccountTypeChecking:
    case FFAccountTypeSavings:
      return YES;
    default:
      return NO;
  }
}
@interface FFGetBalanceRequest ()
@property (strong) NSString* userId;
@property BOOL includeAllAccounts;
@end

@implementation FFGetBalanceRequest

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasIncludeAllAccounts {
  return !!hasIncludeAllAccounts_;
}
- (void) setHasIncludeAllAccounts:(BOOL) value_ {
  hasIncludeAllAccounts_ = !!value_;
}
- (BOOL) includeAllAccounts {
  return !!includeAllAccounts_;
}
- (void) setIncludeAllAccounts:(BOOL) value_ {
  includeAllAccounts_ = !!value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.includeAllAccounts = NO;
  }
  return self;
}
static FFGetBalanceRequest* defaultFFGetBalanceRequestInstance = nil;
+ (void) initialize {
  if (self == [FFGetBalanceRequest class]) {
    defaultFFGetBalanceRequestInstance = [[FFGetBalanceRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFFGetBalanceRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultFFGetBalanceRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasIncludeAllAccounts) {
    [output writeBool:2 value:self.includeAllAccounts];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasIncludeAllAccounts) {
    size_ += computeBoolSize(2, self.includeAllAccounts);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FFGetBalanceRequest*) parseFromData:(NSData*) data {
  return (FFGetBalanceRequest*)[[[FFGetBalanceRequest builder] mergeFromData:data] build];
}
+ (FFGetBalanceRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceRequest*)[[[FFGetBalanceRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FFGetBalanceRequest*) parseFromInputStream:(NSInputStream*) input {
  return (FFGetBalanceRequest*)[[[FFGetBalanceRequest builder] mergeFromInputStream:input] build];
}
+ (FFGetBalanceRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceRequest*)[[[FFGetBalanceRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FFGetBalanceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FFGetBalanceRequest*)[[[FFGetBalanceRequest builder] mergeFromCodedInputStream:input] build];
}
+ (FFGetBalanceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceRequest*)[[[FFGetBalanceRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (FFGetBalanceRequest*) parseFromDict:(id) obj {
    FFGetBalanceRequestBuilder *builder = [FFGetBalanceRequest builder];
    NSDictionary *dict = (NSDictionary *)obj;
    id tmp;
    tmp = [dict objectForKey:@"userId"];
    if (tmp != nil) {
        builder.userId = (NSString *)tmp;
    }
    tmp = [dict objectForKey:@"includeAllAccounts"];
    if (tmp != nil) {
        builder.includeAllAccounts = [(NSNumber *)tmp boolValue];
    }
    return [builder build];
}

- (NSDictionary*) toDict {
    NSMutableDictionary *dict = [NSMutableDictionary new];
    if (self.hasUserId) {
        [dict setObject:self.userId forKey:@"userId"];
    }
    if (self.hasIncludeAllAccounts) {
        [dict setObject:@(self.includeAllAccounts) forKey:@"includeAllAccounts"];
    }
    return dict;
}

// @@protoc_insertion_point(FFGetBalanceRequest)

+ (FFGetBalanceRequestBuilder*) builder {
  return [[FFGetBalanceRequestBuilder alloc] init];
}
+ (FFGetBalanceRequestBuilder*) builderWithPrototype:(FFGetBalanceRequest*) prototype {
  return [[FFGetBalanceRequest builder] mergeFrom:prototype];
}
- (FFGetBalanceRequestBuilder*) builder {
  return [FFGetBalanceRequest builder];
}
- (FFGetBalanceRequestBuilder*) toBuilder {
  return [FFGetBalanceRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasIncludeAllAccounts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"includeAllAccounts", [NSNumber numberWithBool:self.includeAllAccounts]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FFGetBalanceRequest class]]) {
    return NO;
  }
  FFGetBalanceRequest *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasIncludeAllAccounts == otherMessage.hasIncludeAllAccounts &&
      (!self.hasIncludeAllAccounts || self.includeAllAccounts == otherMessage.includeAllAccounts) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasIncludeAllAccounts) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.includeAllAccounts] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FFGetBalanceRequestBuilder()
@property (strong) FFGetBalanceRequest* resultGetBalanceRequest;
@end

@implementation FFGetBalanceRequestBuilder
@synthesize resultGetBalanceRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGetBalanceRequest = [[FFGetBalanceRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGetBalanceRequest;
}
- (FFGetBalanceRequestBuilder*) clear {
  self.resultGetBalanceRequest = [[FFGetBalanceRequest alloc] init];
  return self;
}
- (FFGetBalanceRequestBuilder*) clone {
  return [FFGetBalanceRequest builderWithPrototype:resultGetBalanceRequest];
}
- (FFGetBalanceRequest*) defaultInstance {
  return [FFGetBalanceRequest defaultInstance];
}
- (FFGetBalanceRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FFGetBalanceRequest*) buildPartial {
  FFGetBalanceRequest* returnMe = resultGetBalanceRequest;
  self.resultGetBalanceRequest = nil;
  return returnMe;
}
- (FFGetBalanceRequestBuilder*) mergeFrom:(FFGetBalanceRequest*) other {
  if (other == [FFGetBalanceRequest defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasIncludeAllAccounts) {
    [self setIncludeAllAccounts:other.includeAllAccounts];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FFGetBalanceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FFGetBalanceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        [self setIncludeAllAccounts:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultGetBalanceRequest.hasUserId;
}
- (NSString*) userId {
  return resultGetBalanceRequest.userId;
}
- (FFGetBalanceRequestBuilder*) setUserId:(NSString*) value {
  resultGetBalanceRequest.hasUserId = YES;
  resultGetBalanceRequest.userId = value;
  return self;
}
- (FFGetBalanceRequestBuilder*) clearUserId {
  resultGetBalanceRequest.hasUserId = NO;
  resultGetBalanceRequest.userId = @"";
  return self;
}
- (BOOL) hasIncludeAllAccounts {
  return resultGetBalanceRequest.hasIncludeAllAccounts;
}
- (BOOL) includeAllAccounts {
  return resultGetBalanceRequest.includeAllAccounts;
}
- (FFGetBalanceRequestBuilder*) setIncludeAllAccounts:(BOOL) value {
  resultGetBalanceRequest.hasIncludeAllAccounts = YES;
  resultGetBalanceRequest.includeAllAccounts = value;
  return self;
}
- (FFGetBalanceRequestBuilder*) clearIncludeAllAccounts {
  resultGetBalanceRequest.hasIncludeAllAccounts = NO;
  resultGetBalanceRequest.includeAllAccounts = NO;
  return self;
}
@end

@interface FFGetBalanceResponse ()
@property (strong) FFGetBalanceResponseAccountBalance* primaryAccount;
@property Float64 totalBalance;
@property (strong) NSMutableArray * namesArray;
@property (strong) PBAppendableArray * idsArray;
@property (strong) NSMutableArray * balancesArray;
@property (strong) NSData* buf;
@end

@implementation FFGetBalanceResponse

- (BOOL) hasPrimaryAccount {
  return !!hasPrimaryAccount_;
}
- (void) setHasPrimaryAccount:(BOOL) value_ {
  hasPrimaryAccount_ = !!value_;
}
@synthesize primaryAccount;
- (BOOL) hasTotalBalance {
  return !!hasTotalBalance_;
}
- (void) setHasTotalBalance:(BOOL) value_ {
  hasTotalBalance_ = !!value_;
}
@synthesize totalBalance;
@synthesize namesArray;
@dynamic names;
@synthesize idsArray;
@dynamic ids;
@synthesize balancesArray;
@dynamic balances;
- (BOOL) hasBuf {
  return !!hasBuf_;
}
- (void) setHasBuf:(BOOL) value_ {
  hasBuf_ = !!value_;
}
@synthesize buf;
- (instancetype) init {
  if ((self = [super init])) {
    self.primaryAccount = [FFGetBalanceResponseAccountBalance defaultInstance];
    self.totalBalance = 0;
    self.buf = [NSData data];
  }
  return self;
}
static FFGetBalanceResponse* defaultFFGetBalanceResponseInstance = nil;
+ (void) initialize {
  if (self == [FFGetBalanceResponse class]) {
    defaultFFGetBalanceResponseInstance = [[FFGetBalanceResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFFGetBalanceResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultFFGetBalanceResponseInstance;
}
- (NSArray *)names {
  return namesArray;
}
- (NSString*)namesAtIndex:(NSUInteger)index {
  return [namesArray objectAtIndex:index];
}
- (PBArray *)ids {
  return idsArray;
}
- (SInt32)idsAtIndex:(NSUInteger)index {
  return [idsArray int32AtIndex:index];
}
- (NSArray *)balances {
  return balancesArray;
}
- (FFGetBalanceResponseAccountBalance*)balancesAtIndex:(NSUInteger)index {
  return [balancesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrimaryAccount) {
    [output writeMessage:1 value:self.primaryAccount];
  }
  if (self.hasTotalBalance) {
    [output writeDouble:2 value:self.totalBalance];
  }
  [self.namesArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:3 value:element];
  }];
  [self.balancesArray enumerateObjectsUsingBlock:^(FFGetBalanceResponseAccountBalance *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasBuf) {
    [output writeData:5 value:self.buf];
  }
  const NSUInteger idsArrayCount = self.idsArray.count;
  if (idsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.idsArray.data;
    for (NSUInteger i = 0; i < idsArrayCount; ++i) {
      [output writeInt32:6 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPrimaryAccount) {
    size_ += computeMessageSize(1, self.primaryAccount);
  }
  if (self.hasTotalBalance) {
    size_ += computeDoubleSize(2, self.totalBalance);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.namesArray.count;
    [self.namesArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.balancesArray enumerateObjectsUsingBlock:^(FFGetBalanceResponseAccountBalance *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasBuf) {
    size_ += computeDataSize(5, self.buf);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.idsArray.count;
    const SInt32 *values = (const SInt32 *)self.idsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FFGetBalanceResponse*) parseFromData:(NSData*) data {
  return (FFGetBalanceResponse*)[[[FFGetBalanceResponse builder] mergeFromData:data] build];
}
+ (FFGetBalanceResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceResponse*)[[[FFGetBalanceResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FFGetBalanceResponse*) parseFromInputStream:(NSInputStream*) input {
  return (FFGetBalanceResponse*)[[[FFGetBalanceResponse builder] mergeFromInputStream:input] build];
}
+ (FFGetBalanceResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceResponse*)[[[FFGetBalanceResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FFGetBalanceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FFGetBalanceResponse*)[[[FFGetBalanceResponse builder] mergeFromCodedInputStream:input] build];
}
+ (FFGetBalanceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceResponse*)[[[FFGetBalanceResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (FFGetBalanceResponse*) parseFromDict:(id) obj {
    FFGetBalanceResponseBuilder *builder = [FFGetBalanceResponse builder];
    NSDictionary *dict = (NSDictionary *)obj;
    id tmp;
    tmp = [dict objectForKey:@"primaryAccount"];
    if (tmp != nil) {
        builder.primaryAccount = [FFGetBalanceResponseAccountBalance parseFromDict:tmp];
    }
    tmp = [dict objectForKey:@"totalBalance"];
    if (tmp != nil) {
        builder.totalBalance = [(NSNumber *)tmp doubleValue];
    }
    tmp = [dict objectForKey:@"names"];
    if (tmp != nil) {
        for (id x in (NSArray *)tmp) {
            [builder addNames:(NSString *)x];
        }
    }
    tmp = [dict objectForKey:@"ids"];
    if (tmp != nil) {
        for (id x in (NSArray *)tmp) {
            [builder addIds:[(NSNumber *)x intValue]];
        }
    }
    tmp = [dict objectForKey:@"balances"];
    if (tmp != nil) {
        for (id x in (NSArray *)tmp) {
            [builder addBalances:[FFGetBalanceResponseAccountBalance parseFromDict:x]];
        }
    }
    tmp = [dict objectForKey:@"buf"];
    if (tmp != nil) {
        builder.buf = (NSData *)tmp;
    }
    return [builder build];
}

- (NSDictionary*) toDict {
    NSMutableDictionary *dict = [NSMutableDictionary new];
    if (self.hasPrimaryAccount) {
        [dict setObject:[self.primaryAccount toDict] forKey:@"primaryAccount"];
    }
    if (self.hasTotalBalance) {
        [dict setObject:@(self.totalBalance) forKey:@"totalBalance"];
    }
    if (self.namesArray.count > 0) {
        NSMutableArray *arr = [NSMutableArray new];
        for (int i = 0; i < self.namesArray.count; i++) {
            [arr addObject:[self namesAtIndex:i]];
        }
        [dict setObject:arr forKey:@"names"];
    }
    if (self.idsArray.count > 0) {
        NSMutableArray *arr = [NSMutableArray new];
        for (int i = 0; i < self.idsArray.count; i++) {
            [arr addObject:@([self idsAtIndex:i])];
        }
        [dict setObject:arr forKey:@"ids"];
    }
    if (self.balancesArray.count > 0) {
        NSMutableArray *arr = [NSMutableArray new];
        for (int i = 0; i < self.balancesArray.count; i++) {
            [arr addObject:[[self balancesAtIndex:i] toDict]];
        }
        [dict setObject:arr forKey:@"balances"];
    }
    if (self.hasBuf) {
        [dict setObject:self.buf forKey:@"buf"];
    }
    return dict;
}

// @@protoc_insertion_point(FFGetBalanceResponse)

+ (FFGetBalanceResponseBuilder*) builder {
  return [[FFGetBalanceResponseBuilder alloc] init];
}
+ (FFGetBalanceResponseBuilder*) builderWithPrototype:(FFGetBalanceResponse*) prototype {
  return [[FFGetBalanceResponse builder] mergeFrom:prototype];
}
- (FFGetBalanceResponseBuilder*) builder {
  return [FFGetBalanceResponse builder];
}
- (FFGetBalanceResponseBuilder*) toBuilder {
  return [FFGetBalanceResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPrimaryAccount) {
    [output appendFormat:@"%@%@ {\n", indent, @"primaryAccount"];
    [self.primaryAccount writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTotalBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalBalance", [NSNumber numberWithDouble:self.totalBalance]];
  }
  [self.namesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"names", obj];
  }];
  [self.balancesArray enumerateObjectsUsingBlock:^(FFGetBalanceResponseAccountBalance *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"balances"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasBuf) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buf", self.buf];
  }
  [self.idsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ids", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FFGetBalanceResponse class]]) {
    return NO;
  }
  FFGetBalanceResponse *otherMessage = other;
  return
      self.hasPrimaryAccount == otherMessage.hasPrimaryAccount &&
      (!self.hasPrimaryAccount || [self.primaryAccount isEqual:otherMessage.primaryAccount]) &&
      self.hasTotalBalance == otherMessage.hasTotalBalance &&
      (!self.hasTotalBalance || self.totalBalance == otherMessage.totalBalance) &&
      [self.namesArray isEqualToArray:otherMessage.namesArray] &&
      [self.balancesArray isEqualToArray:otherMessage.balancesArray] &&
      self.hasBuf == otherMessage.hasBuf &&
      (!self.hasBuf || [self.buf isEqual:otherMessage.buf]) &&
      [self.idsArray isEqualToArray:otherMessage.idsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPrimaryAccount) {
    hashCode = hashCode * 31 + [self.primaryAccount hash];
  }
  if (self.hasTotalBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.totalBalance] hash];
  }
  [self.namesArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.balancesArray enumerateObjectsUsingBlock:^(FFGetBalanceResponseAccountBalance *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBuf) {
    hashCode = hashCode * 31 + [self.buf hash];
  }
  [self.idsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FFGetBalanceResponseAccountBalance ()
@property FFAccountType accountType;
@property Float64 balance;
@end

@implementation FFGetBalanceResponseAccountBalance

- (BOOL) hasAccountType {
  return !!hasAccountType_;
}
- (void) setHasAccountType:(BOOL) value_ {
  hasAccountType_ = !!value_;
}
@synthesize accountType;
- (BOOL) hasBalance {
  return !!hasBalance_;
}
- (void) setHasBalance:(BOOL) value_ {
  hasBalance_ = !!value_;
}
@synthesize balance;
- (instancetype) init {
  if ((self = [super init])) {
    self.accountType = FFAccountTypeChecking;
    self.balance = 0;
  }
  return self;
}
static FFGetBalanceResponseAccountBalance* defaultFFGetBalanceResponseAccountBalanceInstance = nil;
+ (void) initialize {
  if (self == [FFGetBalanceResponseAccountBalance class]) {
    defaultFFGetBalanceResponseAccountBalanceInstance = [[FFGetBalanceResponseAccountBalance alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFFGetBalanceResponseAccountBalanceInstance;
}
- (instancetype) defaultInstance {
  return defaultFFGetBalanceResponseAccountBalanceInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountType) {
    [output writeEnum:1 value:self.accountType];
  }
  if (self.hasBalance) {
    [output writeDouble:2 value:self.balance];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountType) {
    size_ += computeEnumSize(1, self.accountType);
  }
  if (self.hasBalance) {
    size_ += computeDoubleSize(2, self.balance);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FFGetBalanceResponseAccountBalance*) parseFromData:(NSData*) data {
  return (FFGetBalanceResponseAccountBalance*)[[[FFGetBalanceResponseAccountBalance builder] mergeFromData:data] build];
}
+ (FFGetBalanceResponseAccountBalance*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceResponseAccountBalance*)[[[FFGetBalanceResponseAccountBalance builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FFGetBalanceResponseAccountBalance*) parseFromInputStream:(NSInputStream*) input {
  return (FFGetBalanceResponseAccountBalance*)[[[FFGetBalanceResponseAccountBalance builder] mergeFromInputStream:input] build];
}
+ (FFGetBalanceResponseAccountBalance*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceResponseAccountBalance*)[[[FFGetBalanceResponseAccountBalance builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FFGetBalanceResponseAccountBalance*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FFGetBalanceResponseAccountBalance*)[[[FFGetBalanceResponseAccountBalance builder] mergeFromCodedInputStream:input] build];
}
+ (FFGetBalanceResponseAccountBalance*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FFGetBalanceResponseAccountBalance*)[[[FFGetBalanceResponseAccountBalance builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (FFGetBalanceResponseAccountBalance*) parseFromDict:(id) obj {
    FFGetBalanceResponseAccountBalanceBuilder *builder = [FFGetBalanceResponseAccountBalance builder];
    NSDictionary *dict = (NSDictionary *)obj;
    id tmp;
    tmp = [dict objectForKey:@"accountType"];
    if (tmp != nil) {
        builder.accountType = [(NSNumber *)tmp intValue];
    }
    tmp = [dict objectForKey:@"balance"];
    if (tmp != nil) {
        builder.balance = [(NSNumber *)tmp doubleValue];
    }
    return [builder build];
}

- (NSDictionary*) toDict {
    NSMutableDictionary *dict = [NSMutableDictionary new];
    if (self.hasAccountType) {
        [dict setObject:@(self.accountType) forKey:@"accountType"];
    }
    if (self.hasBalance) {
        [dict setObject:@(self.balance) forKey:@"balance"];
    }
    return dict;
}

// @@protoc_insertion_point(FFGetBalanceResponseAccountBalance)

+ (FFGetBalanceResponseAccountBalanceBuilder*) builder {
  return [[FFGetBalanceResponseAccountBalanceBuilder alloc] init];
}
+ (FFGetBalanceResponseAccountBalanceBuilder*) builderWithPrototype:(FFGetBalanceResponseAccountBalance*) prototype {
  return [[FFGetBalanceResponseAccountBalance builder] mergeFrom:prototype];
}
- (FFGetBalanceResponseAccountBalanceBuilder*) builder {
  return [FFGetBalanceResponseAccountBalance builder];
}
- (FFGetBalanceResponseAccountBalanceBuilder*) toBuilder {
  return [FFGetBalanceResponseAccountBalance builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountType", [NSNumber numberWithInteger:self.accountType]];
  }
  if (self.hasBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"balance", [NSNumber numberWithDouble:self.balance]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FFGetBalanceResponseAccountBalance class]]) {
    return NO;
  }
  FFGetBalanceResponseAccountBalance *otherMessage = other;
  return
      self.hasAccountType == otherMessage.hasAccountType &&
      (!self.hasAccountType || self.accountType == otherMessage.accountType) &&
      self.hasBalance == otherMessage.hasBalance &&
      (!self.hasBalance || self.balance == otherMessage.balance) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAccountType) {
    hashCode = hashCode * 31 + self.accountType;
  }
  if (self.hasBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.balance] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FFGetBalanceResponseAccountBalanceBuilder()
@property (strong) FFGetBalanceResponseAccountBalance* resultAccountBalance;
@end

@implementation FFGetBalanceResponseAccountBalanceBuilder
@synthesize resultAccountBalance;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAccountBalance = [[FFGetBalanceResponseAccountBalance alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAccountBalance;
}
- (FFGetBalanceResponseAccountBalanceBuilder*) clear {
  self.resultAccountBalance = [[FFGetBalanceResponseAccountBalance alloc] init];
  return self;
}
- (FFGetBalanceResponseAccountBalanceBuilder*) clone {
  return [FFGetBalanceResponseAccountBalance builderWithPrototype:resultAccountBalance];
}
- (FFGetBalanceResponseAccountBalance*) defaultInstance {
  return [FFGetBalanceResponseAccountBalance defaultInstance];
}
- (FFGetBalanceResponseAccountBalance*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FFGetBalanceResponseAccountBalance*) buildPartial {
  FFGetBalanceResponseAccountBalance* returnMe = resultAccountBalance;
  self.resultAccountBalance = nil;
  return returnMe;
}
- (FFGetBalanceResponseAccountBalanceBuilder*) mergeFrom:(FFGetBalanceResponseAccountBalance*) other {
  if (other == [FFGetBalanceResponseAccountBalance defaultInstance]) {
    return self;
  }
  if (other.hasAccountType) {
    [self setAccountType:other.accountType];
  }
  if (other.hasBalance) {
    [self setBalance:other.balance];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FFGetBalanceResponseAccountBalanceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FFGetBalanceResponseAccountBalanceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        FFAccountType value = (FFAccountType)[input readEnum];
        if (FFAccountTypeIsValidValue(value)) {
          [self setAccountType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 17: {
        [self setBalance:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountType {
  return resultAccountBalance.hasAccountType;
}
- (FFAccountType) accountType {
  return resultAccountBalance.accountType;
}
- (FFGetBalanceResponseAccountBalanceBuilder*) setAccountType:(FFAccountType) value {
  resultAccountBalance.hasAccountType = YES;
  resultAccountBalance.accountType = value;
  return self;
}
- (FFGetBalanceResponseAccountBalanceBuilder*) clearAccountType {
  resultAccountBalance.hasAccountType = NO;
  resultAccountBalance.accountType = FFAccountTypeChecking;
  return self;
}
- (BOOL) hasBalance {
  return resultAccountBalance.hasBalance;
}
- (Float64) balance {
  return resultAccountBalance.balance;
}
- (FFGetBalanceResponseAccountBalanceBuilder*) setBalance:(Float64) value {
  resultAccountBalance.hasBalance = YES;
  resultAccountBalance.balance = value;
  return self;
}
- (FFGetBalanceResponseAccountBalanceBuilder*) clearBalance {
  resultAccountBalance.hasBalance = NO;
  resultAccountBalance.balance = 0;
  return self;
}
@end

@interface FFGetBalanceResponseBuilder()
@property (strong) FFGetBalanceResponse* resultGetBalanceResponse;
@end

@implementation FFGetBalanceResponseBuilder
@synthesize resultGetBalanceResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGetBalanceResponse = [[FFGetBalanceResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGetBalanceResponse;
}
- (FFGetBalanceResponseBuilder*) clear {
  self.resultGetBalanceResponse = [[FFGetBalanceResponse alloc] init];
  return self;
}
- (FFGetBalanceResponseBuilder*) clone {
  return [FFGetBalanceResponse builderWithPrototype:resultGetBalanceResponse];
}
- (FFGetBalanceResponse*) defaultInstance {
  return [FFGetBalanceResponse defaultInstance];
}
- (FFGetBalanceResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FFGetBalanceResponse*) buildPartial {
  FFGetBalanceResponse* returnMe = resultGetBalanceResponse;
  self.resultGetBalanceResponse = nil;
  return returnMe;
}
- (FFGetBalanceResponseBuilder*) mergeFrom:(FFGetBalanceResponse*) other {
  if (other == [FFGetBalanceResponse defaultInstance]) {
    return self;
  }
  if (other.hasPrimaryAccount) {
    [self mergePrimaryAccount:other.primaryAccount];
  }
  if (other.hasTotalBalance) {
    [self setTotalBalance:other.totalBalance];
  }
  if (other.namesArray.count > 0) {
    if (resultGetBalanceResponse.namesArray == nil) {
      resultGetBalanceResponse.namesArray = [[NSMutableArray alloc] initWithArray:other.namesArray];
    } else {
      [resultGetBalanceResponse.namesArray addObjectsFromArray:other.namesArray];
    }
  }
  if (other.idsArray.count > 0) {
    if (resultGetBalanceResponse.idsArray == nil) {
      resultGetBalanceResponse.idsArray = [other.idsArray copy];
    } else {
      [resultGetBalanceResponse.idsArray appendArray:other.idsArray];
    }
  }
  if (other.balancesArray.count > 0) {
    if (resultGetBalanceResponse.balancesArray == nil) {
      resultGetBalanceResponse.balancesArray = [[NSMutableArray alloc] initWithArray:other.balancesArray];
    } else {
      [resultGetBalanceResponse.balancesArray addObjectsFromArray:other.balancesArray];
    }
  }
  if (other.hasBuf) {
    [self setBuf:other.buf];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FFGetBalanceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FFGetBalanceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FFGetBalanceResponseAccountBalanceBuilder* subBuilder = [FFGetBalanceResponseAccountBalance builder];
        if (self.hasPrimaryAccount) {
          [subBuilder mergeFrom:self.primaryAccount];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPrimaryAccount:[subBuilder buildPartial]];
        break;
      }
      case 17: {
        [self setTotalBalance:[input readDouble]];
        break;
      }
      case 26: {
        [self addNames:[input readString]];
        break;
      }
      case 34: {
        FFGetBalanceResponseAccountBalanceBuilder* subBuilder = [FFGetBalanceResponseAccountBalance builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBalances:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setBuf:[input readData]];
        break;
      }
      case 48: {
        [self addIds:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPrimaryAccount {
  return resultGetBalanceResponse.hasPrimaryAccount;
}
- (FFGetBalanceResponseAccountBalance*) primaryAccount {
  return resultGetBalanceResponse.primaryAccount;
}
- (FFGetBalanceResponseBuilder*) setPrimaryAccount:(FFGetBalanceResponseAccountBalance*) value {
  resultGetBalanceResponse.hasPrimaryAccount = YES;
  resultGetBalanceResponse.primaryAccount = value;
  return self;
}
- (FFGetBalanceResponseBuilder*) setPrimaryAccountBuilder:(FFGetBalanceResponseAccountBalanceBuilder*) builderForValue {
  return [self setPrimaryAccount:[builderForValue build]];
}
- (FFGetBalanceResponseBuilder*) mergePrimaryAccount:(FFGetBalanceResponseAccountBalance*) value {
  if (resultGetBalanceResponse.hasPrimaryAccount &&
      resultGetBalanceResponse.primaryAccount != [FFGetBalanceResponseAccountBalance defaultInstance]) {
    resultGetBalanceResponse.primaryAccount =
      [[[FFGetBalanceResponseAccountBalance builderWithPrototype:resultGetBalanceResponse.primaryAccount] mergeFrom:value] buildPartial];
  } else {
    resultGetBalanceResponse.primaryAccount = value;
  }
  resultGetBalanceResponse.hasPrimaryAccount = YES;
  return self;
}
- (FFGetBalanceResponseBuilder*) clearPrimaryAccount {
  resultGetBalanceResponse.hasPrimaryAccount = NO;
  resultGetBalanceResponse.primaryAccount = [FFGetBalanceResponseAccountBalance defaultInstance];
  return self;
}
- (BOOL) hasTotalBalance {
  return resultGetBalanceResponse.hasTotalBalance;
}
- (Float64) totalBalance {
  return resultGetBalanceResponse.totalBalance;
}
- (FFGetBalanceResponseBuilder*) setTotalBalance:(Float64) value {
  resultGetBalanceResponse.hasTotalBalance = YES;
  resultGetBalanceResponse.totalBalance = value;
  return self;
}
- (FFGetBalanceResponseBuilder*) clearTotalBalance {
  resultGetBalanceResponse.hasTotalBalance = NO;
  resultGetBalanceResponse.totalBalance = 0;
  return self;
}
- (NSMutableArray *)names {
  return resultGetBalanceResponse.namesArray;
}
- (NSString*)namesAtIndex:(NSUInteger)index {
  return [resultGetBalanceResponse namesAtIndex:index];
}
- (FFGetBalanceResponseBuilder *)addNames:(NSString*)value {
  if (resultGetBalanceResponse.namesArray == nil) {
    resultGetBalanceResponse.namesArray = [[NSMutableArray alloc]init];
  }
  [resultGetBalanceResponse.namesArray addObject:value];
  return self;
}
- (FFGetBalanceResponseBuilder *)setNamesArray:(NSArray *)array {
  resultGetBalanceResponse.namesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (FFGetBalanceResponseBuilder *)clearNames {
  resultGetBalanceResponse.namesArray = nil;
  return self;
}
- (PBAppendableArray *)ids {
  return resultGetBalanceResponse.idsArray;
}
- (SInt32)idsAtIndex:(NSUInteger)index {
  return [resultGetBalanceResponse idsAtIndex:index];
}
- (FFGetBalanceResponseBuilder *)addIds:(SInt32)value {
  if (resultGetBalanceResponse.idsArray == nil) {
    resultGetBalanceResponse.idsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultGetBalanceResponse.idsArray addInt32:value];
  return self;
}
- (FFGetBalanceResponseBuilder *)setIdsArray:(NSArray *)array {
  resultGetBalanceResponse.idsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (FFGetBalanceResponseBuilder *)setIdsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultGetBalanceResponse.idsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (FFGetBalanceResponseBuilder *)clearIds {
  resultGetBalanceResponse.idsArray = nil;
  return self;
}
- (NSMutableArray *)balances {
  return resultGetBalanceResponse.balancesArray;
}
- (FFGetBalanceResponseAccountBalance*)balancesAtIndex:(NSUInteger)index {
  return [resultGetBalanceResponse balancesAtIndex:index];
}
- (FFGetBalanceResponseBuilder *)addBalances:(FFGetBalanceResponseAccountBalance*)value {
  if (resultGetBalanceResponse.balancesArray == nil) {
    resultGetBalanceResponse.balancesArray = [[NSMutableArray alloc]init];
  }
  [resultGetBalanceResponse.balancesArray addObject:value];
  return self;
}
- (FFGetBalanceResponseBuilder *)setBalancesArray:(NSArray *)array {
  resultGetBalanceResponse.balancesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FFGetBalanceResponseBuilder *)clearBalances {
  resultGetBalanceResponse.balancesArray = nil;
  return self;
}
- (BOOL) hasBuf {
  return resultGetBalanceResponse.hasBuf;
}
- (NSData*) buf {
  return resultGetBalanceResponse.buf;
}
- (FFGetBalanceResponseBuilder*) setBuf:(NSData*) value {
  resultGetBalanceResponse.hasBuf = YES;
  resultGetBalanceResponse.buf = value;
  return self;
}
- (FFGetBalanceResponseBuilder*) clearBuf {
  resultGetBalanceResponse.hasBuf = NO;
  resultGetBalanceResponse.buf = [NSData data];
  return self;
}
@end


@implementation FFBank {
}

+ (FFBank *)newInstance:(NSString *)address {
  return [[FFBank alloc] initWithAddress:address];
}

- (id)initWithAddress:(NSString *)address {
    self = [self init];
    if (self) {
      _address = address;
    }
    return self;
}

- (void)getBalanceCall:(FFGetBalanceRequest *)request userId:(NSString *)userId done:(void (^)(NSError *err, FFGetBalanceResponse *response))callback {
    NSMutableString *path = [NSMutableString new];
    [path appendString:@"/user/"];
    [path appendString:userId];
    [path appendString:@"/get_balance"];

    [ProtoService makeCallTo:_address path:path method:@"POST" request:[request toDict] done:^void (NSError *err, id response) {
        if (err != nil) {
            callback(err, nil);
            return;
        }
        FFGetBalanceResponse *res = [FFGetBalanceResponse parseFromDict:response];
        callback(nil, res);
    }];
}

@end

// @@protoc_insertion_point(global_scope)
